{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/enemy.js","webpack:///./lib/index.js","webpack:///./lib/game.js","webpack:///./lib/background.js","webpack:///./lib/husky.js","webpack:///./lib/bat.js","webpack:///./lib/skeleton.js","webpack:///./lib/light.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","[object Object]","game","husky","this","frame","width","height","xPos","yPos","velX","velY","sprites","Image","bound","stunCount","deathSound","Audio","dead","src","enemyAnimation","delay","y","x","addScore","playSound","setTimeout","delEnemy","speed","die","ctx","move","draw","animIdx","Math","floor","length","drawImage","Game","document","addEventListener","canvas","getElementById","Background","Husky","Bat","Skeleton","Light","getContext","audio","loop","paused","muted","currentTime","hiScore","restart","pressKey","drawOpening","clearRect","background","strokeText","requestAnimationFrame","amount","score","hp","maxEnemies","ceil","enemies","newEnemy","random","push","enemy","idx","indexOf","splice","forEach","tick","light","i1","fin1","abs","i2","fin2","otherEnemy","e","preventDefault","code","play","pause","releaseKey","sound","enemySpawner","setInterval","addEnemy","clearInterval","removeEventListener","bgClouds","bgTrees1","bgTrees2","envAssets","xCloud","xTree1","xTree2","xGround","ANIMATIONS","barking","walking","running","jumping","sitting","sit","stand","standing","action","energy","huskyPng","heartPng","barkMP3","whine","heldKeys","a","fin","KeyD","KeyW","animationSet","changeActionObj","checkCollision","Enemy","super","default","burst","explosion","swirl","state","lightPng","heldEnemies","capture","KeyJ","KeyL","KeyI","KeyK"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","class Enemy {\n  constructor(game, husky) {\n    this.game = game;\n    this.husky = husky;\n    this.frame = 0;\n    this.width = 32;\n    this.height = 32;\n    this.xPos = 290;\n    this.yPos = 129;\n    this.velX = -.5;\n    this.velY = 0;\n    this.sprites = new Image();\n    this.bound = false;\n    this.stunCount = 0;\n    this.deathSound = new Audio('./assets/audio/retro_die_02.ogg');   \n  }\n\n  die() {\n    this.dead = true;\n    this.velY = 0;\n    this.frame = 0;\n    this.sprites.src = './assets/images/explosion.png';\n    this.enemyAnimation = {\n      width: 32,\n      height: 32,\n      delay: 10,\n      y: 0,\n      x: [0, 32, 64, 96, 128, 160]\n    };\n    this.game.addScore(5);\n    this.game.playSound(this.deathSound);\n    setTimeout(() => {\n      this.game.delEnemy(this)\n    }, 500);\n  }\n\n  move() {\n    if (this.dead) {\n      this.xPos -= this.husky.speed;\n    } else if (!this.bound) {\n      if (this.yPos < 129) {\n        this.velY += .3;\n      }      \n      if (this.velX > -.5 && (this.stunCount === 0 || this.dead)) {\n        this.velX -= .5;\n      }      \n      this.xPos += this.velX - (this.husky.speed);\n    } else {\n      this.xPos += this.velX;\n    }\n    this.yPos += this.velY;\n    if (this.yPos >= 129) {\n      this.yPos = 129;\n      if (this.velY > 6) {\n        if (!this.dead) {\n          this.die();\n        }        \n      } else {\n        this.velY = 0;\n      }\n    }\n  }\n\n  tick(ctx) {      \n    if (this.stunCount > 0) {\n      this.stunCount -= 1;\n    }    \n    this.move();\n    this.draw(ctx);\n    if (this.xPos < -30) {\n      this.game.delEnemy(this);\n    }\n    this.frame = this.frame + 1;\n  }\n\n  draw(ctx) {\n    let animIdx = Math.floor(this.frame / this.enemyAnimation.delay);\n    if (this.stunCount === 0 && animIdx === this.enemyAnimation.x.length) {\n      this.frame = 0;\n      animIdx = 0;\n    }\n    let x = this.enemyAnimation.x[animIdx || 0];\n    ctx.drawImage(this.sprites, x, this.enemyAnimation.y, this.enemyAnimation.width, this.enemyAnimation.height, this.xPos - (this.width/2), this.yPos - (this.height/1.5), this.width, this.height);\n  }\n}\n\nmodule.exports = Enemy;","const Game = require('./game');\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.getElementById(\"game-canvas\");\n  const game = new Game(canvas);\n});","\nconst Background = require('./background');\nconst Husky = require('./husky');\nconst Bat = require('./bat');\nconst Skeleton = require('./skeleton');\nconst Light = require('./light');\n\nclass Game {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\")\n    this.height = canvas.height;\n    this.width = canvas.width;\n    this.audio = new Audio('./assets/audio/Radio Etalia.mp3');\n    this.audio.loop = true;\n    this.paused = true;\n    this.muted = false;\n    this.audio.currentTime = 0;\n    this.hiScore = 0;\n    this.restart();\n    document.addEventListener('keydown', this.pressKey.bind(this));\n    this.drawOpening();\n  }\n\n  drawOpening() {\n    this.ctx.clearRect(0, 0, 750, 500);\n    this.background.draw(this.ctx); \n    this.husky.draw(this.ctx);\n    this.ctx.strokeText(\"Press enter to play\", (this.width / 2) - 45, 50);\n    if (this.paused) {\n      requestAnimationFrame(this.drawOpening.bind(this));\n    }\n  }\n\n  addScore(amount) {\n    this.score += amount;\n    if (this.husky.hp < 3 && this.score % 100 === 0) {\n      this.husky.hp += 1;\n    }\n  }\n\n  addEnemy() {\n    const maxEnemies = Math.ceil(this.score / 10) || 1;\n    if (this.enemies.length < maxEnemies) {\n      const newEnemy = Math.random() > .4 ? new Skeleton(this, this.husky):new Bat(this, this.husky);\n      this.enemies.push(newEnemy);\n    }\n  }\n\n  delEnemy(enemy) {\n    const idx = this.enemies.indexOf(enemy);\n    this.enemies.splice(idx, 1);\n  }\n\n  tick() {\n    this.ctx.clearRect(0, 0, 750, 500);\n    if (this.paused) {\n      this.background.draw(this.ctx);\n      this.husky.draw(this.ctx);\n      this.enemies.forEach(enemy => enemy.tick(this.ctx));\n      this.ctx.strokeText(\"Press enter to unpause\", (this.width / 2) - 50, 50);\n    } else {\n      this.background.tick(this.ctx);\n      this.husky.tick(this.ctx);\n      this.light.tick(this.ctx);\n      this.enemies.forEach(enemy => enemy.tick(this.ctx));\n      for (let i1=0,fin1=this.enemies.length; i1<fin1; i1++) {\n        const enemy = this.enemies[i1];\n        if ((Math.abs(enemy.velX) > 6 || Math.abs(enemy.velY) > 6) && (!enemy.bound || enemy.dead)) {\n          for (let i2=0,fin2=this.enemies.length; i2<fin2; i2++) {\n            const otherEnemy = this.enemies[i2];\n            if (i1 !== i2 && (!otherEnemy.bound || otherEnemy.dead)) {\n              if (Math.abs(enemy.xPos - otherEnemy.xPos) < 13 && Math.abs(enemy.yPos - otherEnemy.yPos) < 13) {\n                enemy.die();\n                otherEnemy.die();\n                break\n              }\n            }\n          }\n        }\n      }\n    }\n    this.ctx.strokeText(`Score: ${this.score}`, 140, 16);\n    this.ctx.strokeText(`High Score: ${this.hiScore}`, 210, 16);\n    if (!this.paused) {\n      requestAnimationFrame(this.tick.bind(this));\n    }\n  }\n\n  pressKey(e) {\n    e.preventDefault(); \n    if (e.code === \"Enter\") {\n      if (this.paused) {\n        this.play();\n      } else {\n        this.pause();\n      }\n    } else if (e.code === \"KeyM\") {\n      this.audio.muted = !this.audio.muted;\n      this.muted = !this.muted;\n    } else if (!this.paused) {\n      this.husky.pressKey(e.code);\n      this.light.pressKey(e.code);\n    }\n  }\n\n  releaseKey(e) {\n    this.husky.releaseKey(e.code);\n    this.light.releaseKey(e.code);\n  }\n\n  playSound(sound) {\n    if (!this.muted) {\n      sound.play()\n    }\n  }\n\n  play() {\n    this.paused = false;\n    this.audio.play();    \n    document.addEventListener('keyup', this.releaseKey.bind(this));\n    this.enemySpawner = setInterval(() => {\n      this.addEnemy();\n    }, 2000);\n    this.tick();\n  }\n\n  pause() {\n    clearInterval(this.enemySpawner);\n    this.paused = true;\n    this.audio.pause();\n    document.removeEventListener('keyup', this.releaseKey);\n  }\n\n  restart() {\n    this.husky = new Husky(this);\n    this.background = new Background(this.husky);\n    this.enemies = [new Bat(this, this.husky)];\n    this.light = new Light(this, this.husky);\n    if (this.score > this.hiScore) {\n      this.hiScore = this.score;\n    }\n    this.score = 0;\n  }\n\n}\n\nmodule.exports = Game;","class Background {\n  constructor(husky) {\n    this.bgClouds = new Image();\n    this.bgClouds.src = './assets/images/bg_clouds.png';\n    this.bgTrees1 = new Image();\n    this.bgTrees1.src = './assets/images/bg_trees_1.png';\n    this.bgTrees2 = new Image();\n    this.bgTrees2.src = './assets/images/bg_trees_2.png';\n    this.envAssets = new Image();\n    this.envAssets.src = './assets/images/env_assets.png';\n    this.xCloud = 0;\n    this.xTree1 = 0;\n    this.xTree2 = 0;\n    this.xGround = 0;\n    this.husky = husky;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(this.bgClouds, this.xCloud, 0);\n    ctx.drawImage(this.bgClouds, this.xCloud - 384, 0);\n    ctx.drawImage(this.bgClouds, this.xCloud + 384, 0);\n    ctx.drawImage(this.bgTrees1, this.xTree1, 0);\n    ctx.drawImage(this.bgTrees1, this.xTree1 + 384, 0);\n    ctx.drawImage(this.bgTrees2, this.xTree2, 0);\n    ctx.drawImage(this.bgTrees2, this.xTree2 + 384, 0);\n    for (let i=0; i < 15; i++) {\n      ctx.drawImage(this.envAssets, 150, 32, 32, 16, this.xGround + (i * 32), 140, 32, 16);\n    }\n    this.xCloud = (this.xCloud >= 384 || this.xCloud <= -384) ? 0 : (this.xCloud + .2 - (this.husky.speed * .25));\n  }\n\n  tick(ctx) {\n    this.draw(ctx);\n    this.xTree1 = this.xTree1 <= -384 ? 0 : (this.xTree1 - (this.husky.speed * .5));\n    this.xTree2 = this.xTree2 <= -384 ? 0 : (this.xTree2 - (this.husky.speed * .75));\n    this.xGround = this.xGround <= -100 ? 0 : (this.xGround - (this.husky.speed));\n  }\n}\n\nmodule.exports = Background;","const ANIMATIONS = {\n  barking: {\n    delay: 15,\n    y: 0,\n    x: [0, 90, 180, 270]\n  },\n  walking: {\n    delay: 15,\n    y: 58,\n    x: [0, 90, 180, 270, 360, 450]\n  },\n  running: {\n    delay: 10,\n    y: 116,\n    x: [0, 90, 180, 270, 360]\n  },\n  jumping: {\n    delay: 10,\n    y: 116,\n    x: [0, 90, 180, 270, 360]\n  },\n  sitting: {\n    delay: 50,\n    y: 174,\n    x: [0, 90, 180, 270]\n  },\n  sit: {\n    delay: 10,\n    y: 232,\n    x: [0, 90, 180]\n  },\n  stand: {\n    delay: 10,\n    y: 232,\n    x: [180, 90, 0]\n  },\n  standing: {\n    delay: 50,\n    y: 290,\n    x: [0, 90, 180, 270]\n  }\n};\n\nclass Husky {\n  constructor(game) {\n    this.game = game;\n    this.action = \"standing\";\n    this.frame = 0;\n    this.width = 48;\n    this.height = 32;\n    this.xPos = 30;\n    this.yPos = 129;\n    this.speed = 0;\n    this.velX = 0;\n    this.velY = 0;\n    this.hp = 3;\n    this.energy = 75;\n    this.huskyPng = new Image();\n    this.huskyPng.src = './assets/images/husky.png';\n    this.heartPng = new Image();\n    this.heartPng.src = './assets/images/heart.png';\n    this.barkMP3 = new Audio('./assets/audio/lubark.mp3');\n    this.whine = new Audio('./assets/audio/dogwhine.mp3');\n    this.heldKeys = {\n      a: false,\n      d: false\n    };\n  }\n\n  pressKey(code) {\n    this.heldKeys[code] = true;    \n    if (code === \"Space\") {\n      this.energy += this.action === \"sitting\" ? 5 : 1;\n      if (this.energy > 100) {\n        this.energy = 100;        \n      }\n    } else if (code === \"KeyW\" && this.action === \"sitting\") {\n      this.frame = 0;\n      this.action = \"stand\";\n    } else if (code === \"KeyA\" && (this.action === \"standing\" && this.energy >= 3)) {\n      this.frame = 0;\n      this.action = \"barking\";\n      this.barkMP3.currentTime = 0;\n      setTimeout(() => {\n        this.game.playSound(this.barkMP3);\n        this.game.enemies.forEach(enemy => {\n          enemy.velX += 15;\n        })\n      }, 400);\n      this.energy -= 3;\n    } else if (code === \"KeyW\" && this.action === \"running\" && this.energy >= 5 && this.yPos === 129) {\n      this.frame = 0;\n      this.action = \"jumping\";\n      this.velY = -5;\n      this.energy -= 5;\n    } else if (code === \"KeyS\" && (this.action === \"standing\")) {\n      this.velX = 0;\n      this.frame = 0;\n      this.action = \"sit\";\n    }\n\n  }\n\n  releaseKey(code) {\n    this.heldKeys[code] = false;\n  }\n\n  checkCollision() {\n    const enemies = this.game.enemies;\n    for (let i=0,fin=enemies.length; i<fin; i++) {\n      const enemy = enemies[i];\n      if (Math.abs(this.xPos - enemy.xPos) < 20 && Math.abs(this.yPos - enemy.yPos) < 13) {\n        if (!enemy.bound && !enemy.dead) {\n          this.hp -= 1;\n          this.game.playSound(this.whine);\n          enemy.die();\n          if (this.hp === 0) {\n            this.game.restart();\n          }\n        }\n        break\n      }\n    }\n  }\n\n  move() {\n    if (this.heldKeys.KeyD && this.velX < 20) {\n      this.velX += 1;\n    } else {\n      if (this.velX > 0 ) {\n        this.velX -= 1;\n      }\n    }\n\n    if (this.heldKeys.KeyW && this.action === \"jumping\" && this.energy > 0) {\n      this.velY -= .15;\n      this.energy -= .02;\n    }\n    \n    if (this.yPos < 129) {\n      this.velY += .3;\n    }\n    this.yPos += this.velY;\n    if (this.yPos >= 129) {\n      this.yPos = 129;\n      this.velY = 0;\n    }\n  }\n\n  draw(ctx) {\n    const animationSet = ANIMATIONS[this.action];\n    let animIdx = Math.floor(this.frame / animationSet.delay);\n    // at the end of the animation, either loop the same animation or start a different animation\n    if (animIdx === animationSet.x.length) {\n      this.frame = 0;\n      animIdx = 0;\n      const changeActionObj = {\n        sit: 'sitting',\n        stand: 'standing',\n        jumping: 'running',\n        barking: 'standing'\n      };\n      if (this.action in changeActionObj) {\n        this.action = changeActionObj[this.action];\n      }\n    }\n    let x = animationSet.x[animIdx];\n    // because the art asset was flipped\n    x = (540 - x) - 90;\n    // draw husky\n    ctx.drawImage(this.huskyPng, x, animationSet.y, 90, 58, this.xPos - (this.width/2), this.yPos - (this.height/1.5), this.width, this.height);\n\n    // draw hearts\n    for (let i=0, fin=this.hp; i < fin; i++) {\n      ctx.drawImage(this.heartPng, (20 * i) + 5, 5, 16, 16);\n    }\n    if (this.energy < 0) {\n      this.energy = 0;\n    }\n    // draw energy\n    ctx.strokeText(`Energy: ${Math.floor(this.energy)}`, this.hp * 25, 16);\n  }\n\n  tick(ctx) {\n    this.move();\n    this.checkCollision();\n    this.frame = this.frame + 1;\n    this.draw(ctx);\n    \n    if (this.action !== \"walking\" && this.velX > 0 && this.velX < 10) {\n      this.frame = 0;\n      this.action = \"walking\";\n      this.speed = 1;\n    } else if (this.action === \"walking\" && this.velX > 9) {\n      this.frame = 0;\n      this.action = \"running\";\n      this.speed = 2;\n    } else if (this.action === \"walking\" && this.velX === 0) {\n      this.frame = 0;\n      this.action = \"standing\";\n      this.speed = 0;\n    }\n\n  }\n\n}\n\nmodule.exports = Husky;","const Enemy = require('./enemy');\n\nclass Bat extends Enemy {\n  constructor(game, husky) {\n    super(game, husky);\n    this.yPos = Math.floor(Math.random() * 80) + 40;\n    this.sprites.src = './assets/images/enemy_bat.png';\n    this.enemyAnimation = {\n      width: 32,\n      height: 32,\n      delay: 15,\n      y: 96,\n      x: [0, 32, 64, 96]\n    }\n  }\n\n  move() {\n    super.move();\n    if (!this.bound && !this.dead && this.stunCount === 0 && this.yPos > 75 && this.velY > -3) {\n      if (this.yPos > 120) {\n        this.velY = -2;\n      } else if (Math.random() > .8) {        \n        this.velY = -2;\n      }\n    }\n  }\n\n}\n\nmodule.exports = Bat;","const Enemy = require('./enemy');\n\nclass Skeleton extends Enemy {\n  constructor(game, husky) {\n    super(game, husky);\n    this.sprites.src = './assets/images/enemy_skeleton.png';\n    this.enemyAnimation = {\n      width: 32,\n      height: 32,\n      delay: 15,\n      y: 32,\n      x: [0, 32, 64]\n    }\n  }\n}\n\nmodule.exports = Skeleton;","const ANIMATIONS = {\n  x: [0, 131, 262, 393, 524],\n  default: {\n    delay: 10,\n    y: 0,\n    \n  },\n  burst: {\n    delay: 10,\n    y: 131\n  },\n  explosion: {\n    delay: 5,\n    y: 262\n  },\n  swirl: {\n    delay: 10,\n    y: 393\n  }\n};\n\nclass Light {\n  constructor(game, husky) {\n    this.game = game;\n    this.husky = husky;\n    this.state = \"default\";\n    this.frame = 0;\n    this.xPos = 135;\n    this.yPos = 70;\n    this.velX = 0;\n    this.velY = 0;\n    this.lightPng = new Image();\n    this.lightPng.src = './assets/images/magic.png';\n    this.heldKeys = {};\n    this.heldEnemies = [];\n  }\n\n  pressKey(code) {\n    this.heldKeys[code] = true;\n    if (code === \"ShiftLeft\" && this.husky.energy > 4 && this.heldEnemies.length < 6) {\n      this.capture();\n      this.husky.energy -= 5;\n      this.frame = 0;\n      this.state = \"swirl\";\n    } else if (code === \"ShiftRight\") {\n      if (this.heldEnemies.length > 0) {\n        this.frame = 0;\n        this.state = \"default\";\n        this.heldEnemies.forEach(enemy => {\n          enemy.velX = this.velX * 2;\n          enemy.velY = this.velY * 2;\n          enemy.bound = false;\n          enemy.stunCount = 30;\n        })\n        this.heldEnemies = [];\n      }\n    }\n  }\n\n  releaseKey(code) {\n    this.heldKeys[code] = false;\n  }\n\n  capture() {\n    const enemies = this.game.enemies;\n    for (let i = 0, fin = enemies.length; i < fin; i++) {\n      const enemy = enemies[i];\n      if (!enemy.bound) {\n        if (Math.abs(this.xPos - enemy.xPos) < 30 && Math.abs(this.yPos - enemy.yPos) < 20) {\n          enemy.bound = true;\n          this.heldEnemies.push(enemy);\n        }\n      }\n    }\n  }\n\n  move() {\n    if (this.heldKeys.KeyJ && this.velX > -5) {\n      this.velX -= 1;\n    } else if (this.heldKeys.KeyL && this.velX < 5) {\n      this.velX += 1;\n    } else {\n      if (this.velX > 0) {\n        this.velX -= .5;\n      } else if (this.velX < 0) {\n        this.velX += .5;\n      }\n    }\n\n    if (this.heldKeys.KeyI && this.velY > -5) {\n      this.velY -= 1;\n    } else if (this.heldKeys.KeyK && this.velY < 5) {\n      this.velY += 1;\n    } else {\n      if (this.velY > 0) {\n        this.velY -= .5\n      } else if (this.velY < 0) {\n        this.velY += .5\n      }\n    }\n\n    this.xPos += this.velX;\n    this.yPos += this.velY;\n    if (this.xPos >= 290) {\n      this.xPos = 290;\n      this.velX = 0;\n    } else if (this.xPos <= 10) {\n      this.xPos = 10;\n      this.velX = 0;\n    }\n    if (this.yPos >= 130) {\n      this.yPos = 130;\n      this.velY = 0;\n    } else if (this.yPos  <= 30) {\n      this.yPos = 30;\n      this.velY = 0;\n    }\n    this.heldEnemies.forEach(enemy => {\n      enemy.velX = this.velX;\n      enemy.velY = this.velY;\n    })\n  }\n\n  tick(ctx) {\n    const animationSet = ANIMATIONS[this.state];\n    let animIdx = Math.floor(this.frame / animationSet.delay);\n    if (animIdx === ANIMATIONS.x.length) {\n      this.frame = 0;\n      animIdx = 0;\n      if (this.state === \"swirl\") {\n        if (this.heldEnemies.length > 0) {\n          this.state = \"burst\";\n        } else {\n          this.state = \"default\";\n        }\n      }\n    } else {\n      this.frame = this.frame + 1;\n    }\n    const x = ANIMATIONS.x[animIdx || 0];\n    this.move();\n    ctx.drawImage(this.lightPng, x, animationSet.y, 150, 150, this.xPos - 24, this.yPos - 24, 48, 48);\n\n  }\n}\n\nmodule.exports = Light;"],"sourceRoot":""}